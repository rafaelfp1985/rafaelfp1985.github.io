{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "wescale shopping search API",
    "description": "The wescale shopping search API can be used to search the various available content sources for appropriate items to order. The result can contain\nactual products from catalogs managed in the wescale platform and also external webshops the user can access. The searchable content is determined\nby the content visibility of the requesting user. More accurate it depends on the content channels assigned to the user and the content sources\nthese channels contain (multi content channel management).\n\n## Regular search for items\nThe regular search can be used in the most common cases. Different search types are available like simple keyword based search or specialized\nsearch for article number. Apart from that it offers filtering, sorting and faceting options. In order to support the users in case of spelling\nerrors the \"did you mean\" feature returns a list of alternative search terms along with the result.\n\n## Instant search for items\nThe instant search can be used to get results very quickly, e.g. in the moment the user types one or more letters. It is meant for highly\ninteractive search operations and therefore offers a very limited number options. Only a keyword and a set of filters can be specified. There a no\nspecial search types nor sorting available like in the regular search.\n\n## Suggestion of search terms\nIn order to support the users in the best way possible to find what they are looking for appropriate search terms can be suggested based on the\ncurrent input.\n",
    "contact": {}
  },
  "host": "api-dev.wescale.com",
  "basePath": "/shopping-search/v1",
  "securityDefinitions": {
    "auth": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https://portal-dev.wescale.com/oauth2/authorize",
      "tokenUrl": "https://api-dev.wescale.com/authentication/v1/oauth2/token",
      "scopes": {
        "read": "",
        "write": ""
      }
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/search": {
      "post": {
        "description": "Get items from the available content based on the provided search criteria. The seach result can be filtered, sorted and facetted by multiple\nparameters. The number if items returned is limited and can be paged.\n\n`GET with body` Since the size of the request parameters might exceed the maximum length of the URL and to avoid parameter encoding the\noperation uses `POST` instead of `GET` even though no data is created.\n",
        "summary": "search",
        "operationId": "search",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Preferred language for information retrieval."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The search request.",
            "schema": {
              "$ref": "#/definitions/SearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The search result.",
            "schema": {
              "$ref": "#/definitions/SearchResult"
            },
            "headers": {}
          },
          "400": {
            "description": "The request is invalid.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "The request is invalid."
                }
              ]
            }
          },
          "403": {
            "description": "The user is not authorized.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "The user is not authorized."
                }
              ]
            }
          },
          "500": {
            "description": "An unexpected error occured.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Server Error",
                  "status": 500,
                  "detail": "An unexpected error occurred."
                }
              ]
            }
          }
        },
        "security": [
          {
            "auth": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/instant": {
      "post": {
        "description": "Get items from the available content based on the provided search criteria. The seach result can be filtered by multiple parameters. Sorting\nand facetting is **not** available for this operation. The number if items returned is limited and can be paged.\n\n`GET with body` Since the size of the request parameters might exceed the maximum length of the URL and to avoid parameter encoding the\noperation uses `POST` instead of `GET` even though no data is created.\n",
        "summary": "instant",
        "operationId": "instant",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Preferred language for information retrieval."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The instant request.",
            "schema": {
              "$ref": "#/definitions/InstantRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instant result.",
            "schema": {
              "$ref": "#/definitions/InstantResult"
            },
            "headers": {}
          },
          "400": {
            "description": "The request is invalid.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "The request is invalid."
                }
              ]
            }
          },
          "403": {
            "description": "The user is not authorized.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "The user is not authorized."
                }
              ]
            }
          },
          "500": {
            "description": "An unexpected error occured.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Server Error",
                  "status": 500,
                  "detail": "An unexpected error occurred."
                }
              ]
            }
          }
        },
        "security": [
          {
            "auth": [
              "read",
              "write"
            ]
          }
        ]
      }
    },
    "/suggest": {
      "get": {
        "description": "Get useful search terms based on the current input. Along with every search term the catgory it was found in is returned.",
        "summary": "suggestGet",
        "operationId": "suggestGet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Preferred language for information retrieval."
          },
          {
            "name": "q",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "Search terms as partial or completed query input."
          }
        ],
        "responses": {
          "200": {
            "description": "The suggest result.",
            "schema": {
              "$ref": "#/definitions/SuggestResult"
            },
            "headers": {}
          },
          "400": {
            "description": "The request is invalid.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "The request is invalid."
                }
              ]
            }
          },
          "403": {
            "description": "The user is not authorized.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "The user is not authorized."
                }
              ]
            }
          },
          "500": {
            "description": "An unexpected error occured.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Server Error",
                  "status": 500,
                  "detail": "An unexpected error occurred."
                }
              ]
            }
          }
        },
        "security": [
          {
            "auth": [
              "read",
              "write"
            ]
          }
        ]
      },
      "post": {
        "description": "Get useful search terms based on the current input. Along with every search term the catgory it was found in is returned.",
        "summary": "suggestPost",
        "operationId": "suggestPost",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Accept-Language",
            "in": "header",
            "required": true,
            "type": "string",
            "description": "Preferred language for information retrieval."
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "The suggest request.",
            "schema": {
              "$ref": "#/definitions/SuggestRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The suggest result.",
            "schema": {
              "$ref": "#/definitions/SuggestResult"
            },
            "headers": {}
          },
          "400": {
            "description": "The request is invalid.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Bad Request",
                  "status": 400,
                  "detail": "The request is invalid."
                }
              ]
            }
          },
          "403": {
            "description": "The user is not authorized.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Forbidden",
                  "status": 403,
                  "detail": "The user is not authorized."
                }
              ]
            }
          },
          "500": {
            "description": "An unexpected error occured.",
            "schema": {
              "$ref": "#/definitions/Suggest500Error"
            },
            "examples": {
              "application/json": [
                {
                  "title": "Server Error",
                  "status": 500,
                  "detail": "An unexpected error occurred."
                }
              ]
            }
          }
        },
        "security": [
          {
            "auth": [
              "read",
              "write"
            ]
          }
        ]
      }
    }
  },
  "definitions": {
    "SearchRequest": {
      "title": "SearchRequest",
      "description": "Representation of a search request.",
      "type": "object",
      "properties": {
        "q": {
          "description": "Search query.",
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/Type"
        },
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RequestFacets"
          }
        },
        "filter": {
          "$ref": "#/definitions/Filter"
        },
        "limit": {
          "description": "Number of entries per page, also known as page size.",
          "example": 12,
          "type": "integer",
          "default": 12,
          "minimum": 0.0,
          "format": "int32"
        },
        "offset": {
          "description": "Numeric offset identifying the first page entry.",
          "example": 0,
          "type": "integer",
          "default": 0,
          "minimum": 0.0,
          "format": "int32"
        },
        "sort": {
          "description": "Comma-separated list of (multiple) fields to sort. Sorting direction is indicated by prefixes `+` (ascending) or `-` (descending), e.g.\n`sort=-relevance,+name`.\n\nAllowed values are:\n* `relevance`, `name`, `price`, `unitPrice`, `deliveryTime, `leadtime`, `itemPrice`\n\nRecommended use cases are:\n* Sort by relevance (represents natural sorting of the full text search): `sort=-relevance,+name`\n* Sort by price, low to high: `sort=+price,+name`\n* Sort by price, high to low: `sort=-price,+name`\n* Sort by delivery time, shortest first: `sort=+leadtime,+name`",
          "example": "-relevance,+name",
          "type": "string",
          "default": "-relevance,+name"
        }
      }
    },
    "SearchResult": {
      "title": "SearchResult",
      "description": "Representation of a search result.",
      "type": "object",
      "properties": {
        "_params": {
          "$ref": "#/definitions/SearchRequest"
        },
        "did_you_mean": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DidYouMean"
          }
        },
        "facets": {
          "$ref": "#/definitions/ResultFacets"
        },
        "items": {
          "description": "List of found items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultItem"
          }
        },
        "_total_count": {
          "description": "Total count of items found.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "InstantRequest": {
      "title": "InstantRequest",
      "description": "Representation of an instant request.",
      "type": "object",
      "properties": {
        "q": {
          "description": "Search query.",
          "type": "string"
        },
        "filter": {
          "$ref": "#/definitions/Filter"
        },
        "limit": {
          "description": "Number of entries per page, also known as page size.",
          "example": 12,
          "type": "integer",
          "default": 12,
          "minimum": 0.0,
          "format": "int32"
        },
        "offset": {
          "description": "Numeric offset identifying the first page entry.",
          "example": 0,
          "type": "integer",
          "default": 0,
          "minimum": 0.0,
          "format": "int32"
        }
      }
    },
    "InstantResult": {
      "title": "InstantResult",
      "description": "Representation of an instant result.",
      "type": "object",
      "properties": {
        "_params": {
          "$ref": "#/definitions/InstantRequest"
        },
        "items": {
          "description": "List of found items.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResultItem"
          }
        },
        "_total_count": {
          "description": "Total count of items found.",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SuggestRequest": {
      "title": "SuggestRequest",
      "description": "Representation of an suggest request.",
      "type": "object",
      "properties": {
        "q": {
          "description": "Search query.",
          "type": "string"
        }
      }
    },
    "SuggestResult": {
      "title": "SuggestResult",
      "description": "Representation of a suggest result.",
      "type": "object",
      "properties": {
        "_params": {
          "$ref": "#/definitions/SuggestRequest"
        },
        "items": {
          "description": "Sorted list of suggestions.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Suggestion"
          }
        }
      }
    },
    "Suggestion": {
      "title": "Suggestion",
      "description": "Representation of a suggestion.",
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/Type1"
        },
        "name": {
          "description": "Display name of the suggestion.",
          "type": "string"
        },
        "name_md": {
          "description": "Display name of the suggestion with markdown annotation (https://guides.github.com/features/mastering-markdown) as a formatting hint.",
          "type": "string"
        },
        "term": {
          "description": "Technical term of the suggestion.",
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/SuggestionCategory"
        }
      }
    },
    "SuggestionCategory": {
      "title": "SuggestionCategory",
      "type": "object",
      "properties": {
        "schema": {
          "description": "Schema of the associated classification.",
          "type": "string"
        },
        "version": {
          "description": "Version of the associated classification.",
          "example": "[\r\n  6\r\n]",
          "type": "string"
        },
        "code": {
          "description": "Code of the category.",
          "example": "[\r\n  16030190\r\n]",
          "type": "string"
        },
        "name": {
          "description": "Localized name of the category",
          "example": "[\r\n  \"Handheld measuring instrument\"\r\n]",
          "type": "string"
        },
        "path": {
          "description": "Complete paths of the category within the hierarchy.",
          "example": "[\r\n  \"0|ECLASS-6.2\",\r\n  \"1|ECLASS-6.2|23\",\r\n  \"2|ECLASS-6.2|23|33\",\r\n  \"3|ECLASS-6.2|23|33|02\",\r\n  \"4|ECLASS-6.2|23|33|02|07\"\r\n]",
          "type": "string"
        }
      }
    },
    "RequestFacets": {
      "title": "RequestFacets",
      "type": "object",
      "properties": {
        "facet": {
          "description": "The type of facets that should be included in the search response",
          "type": "string"
        },
        "limit": {
          "description": "The maximum amount of facet values that should be included in the search response. If you do not set a value all available facet values are returned.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Filter": {
      "title": "Filter",
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/CategoryFilter"
        },
        "connection": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "supplier_name": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "manufacturer_name": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "feature": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureFacetFilter"
          }
        }
      }
    },
    "CategoryFilter": {
      "title": "CategoryFilter",
      "type": "object",
      "properties": {
        "value": {
          "description": "The value for the category to filter.",
          "example": "[\r\n  \"1|ECLASS-6.1|21\"\r\n]",
          "type": "string"
        },
        "text": {
          "description": "The optional display name of the category filter.",
          "type": "string"
        }
      }
    },
    "FeatureFacetFilter": {
      "title": "FeatureFacetFilter",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier for the feature. If it is a eClass feature, the eClass context and feature id is used here e.g. `ECLASS-6.1|color`",
          "type": "string"
        },
        "text": {
          "description": "The display value for the feature",
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureFacetValue"
          }
        }
      }
    },
    "FeatureFacetValue": {
      "title": "FeatureFacetValue",
      "type": "object",
      "properties": {
        "value": {
          "description": "It can be a calssification code for the feature value, e.g. \"AAA873001\" for black or a freetext string, which suits the feature.",
          "type": "string"
        },
        "text": {
          "description": "The display value for the feature value",
          "type": "string"
        }
      }
    },
    "DidYouMean": {
      "title": "DidYouMean",
      "type": "object",
      "properties": {
        "suggestion": {
          "description": "The suggested search term which will be better than the entered search term",
          "type": "string"
        },
        "hits": {
          "description": "The number of hits for the suggested search term",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ResultFacets": {
      "title": "ResultFacets",
      "type": "object",
      "properties": {
        "category": {
          "$ref": "#/definitions/CategoryFacet"
        },
        "connection": {
          "$ref": "#/definitions/StandardFacet"
        },
        "supplier_name": {
          "$ref": "#/definitions/StandardFacet"
        },
        "manufacturer_name": {
          "$ref": "#/definitions/StandardFacet"
        },
        "feature": {
          "$ref": "#/definitions/FeatureFacets"
        }
      }
    },
    "CategoryFacet": {
      "title": "CategoryFacet",
      "type": "object",
      "properties": {
        "category_path": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacetBucket"
          }
        },
        "buckets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacetBucket"
          }
        }
      }
    },
    "StandardFacet": {
      "title": "StandardFacet",
      "type": "object",
      "properties": {
        "buckets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacetBucket"
          }
        }
      }
    },
    "FeatureFacets": {
      "title": "FeatureFacets",
      "type": "object",
      "properties": {
        "facets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FeatureFacet"
          }
        }
      }
    },
    "FeatureFacet": {
      "title": "FeatureFacet",
      "type": "object",
      "properties": {
        "id": {
          "description": "The identifier for the feature",
          "example": "[\r\n  \"Farbe\"\r\n]",
          "type": "string"
        },
        "text": {
          "description": "The feature text, which can be displayed",
          "type": "string"
        },
        "buckets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FacetBucket"
          }
        }
      }
    },
    "FacetBucket": {
      "title": "FacetBucket",
      "type": "object",
      "properties": {
        "count": {
          "description": "The count of how many products matches the search request.",
          "type": "integer",
          "format": "int64"
        },
        "text": {
          "description": "The translated feature value, if it is not a freetext. The fallback language is 'en-US'.",
          "type": "string"
        },
        "value": {
          "description": "If the feature value has a code, the code is transmitted, e.g. \"AAA873001\" for eclass. If it is a freetext feature the property will be empty.",
          "type": "string"
        }
      }
    },
    "ResultItem": {
      "title": "ResultItem",
      "description": "Representation of an item in the search result.",
      "discriminator": "_discriminator_type",
      "type": "object",
      "properties": {
        "unique_id": {
          "description": "Unique identifier of the product.",
          "type": "string",
          "format": "uuid"
        },
        "tenant_id": {
          "description": "Unique identifier of the wescale tenant.",
          "type": "string",
          "format": "uuid"
        },
        "stable_id": {
          "description": "The stable identifier of the product (generated based on the catalog label and the supplier part number).",
          "example": "[\r\n  \"A2FAB43CDDB0BA998553322B928A30232BC43360\"\r\n]",
          "type": "string"
        },
        "name": {
          "description": "Display name or rather short description.",
          "type": "string"
        },
        "type": {
          "description": "The type of the item.",
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Image"
          }
        }
      }
    },
    "ResultItemWebshop": {
      "title": "ResultItemWebshop",
      "description": "Representation of a webshop in the search result.",
      "allOf": [
        {
          "$ref": "#/definitions/ResultItem"
        },
        {
          "type": "object",
          "properties": {
            "description": {
              "description": "Detailed description or rather long description.",
              "type": "string"
            }
          }
        }
      ]
    },
    "ResultItemProduct": {
      "title": "ResultItemProduct",
      "description": "Representation of a product in the search result.",
      "allOf": [
        {
          "$ref": "#/definitions/ResultItem"
        },
        {
          "type": "object",
          "properties": {
            "meplato_product_id": {
              "description": "Meplato identifier of the product.",
              "type": "string"
            },
            "external_product_id": {
              "description": "External identifier of the product.",
              "type": "string"
            },
            "supplier": {
              "$ref": "#/definitions/ProductSupplier"
            },
            "manufacturer": {
              "$ref": "#/definitions/ProductManufacturer"
            },
            "description": {
              "description": "Detailed description or rather long description.",
              "type": "string"
            },
            "material_group": {
              "description": "Material group.",
              "type": "string"
            },
            "numbers": {
              "$ref": "#/definitions/ProductNumbers"
            },
            "delivery_time": {
              "description": "Delivery time in days.",
              "type": "number",
              "format": "double"
            },
            "quantities": {
              "$ref": "#/definitions/ProductQuantities"
            },
            "order_unit": {
              "$ref": "#/definitions/ProductUnit"
            },
            "packaging_unit": {
              "$ref": "#/definitions/ProductUnit"
            },
            "net_prices": {
              "$ref": "#/definitions/ProductPrices"
            },
            "gross_prices": {
              "$ref": "#/definitions/ProductPrices"
            },
            "currency": {
              "description": "Currency code.",
              "example": "[\r\n  \"EUR\",\r\n  \"USD\"\r\n]",
              "type": "string"
            },
            "display_prices": {
              "$ref": "#/definitions/ProductDisplayPrices"
            },
            "is_daily_price": {
              "description": "Flag indicating if the price is daily based.",
              "type": "boolean"
            },
            "is_visible": {
              "description": "Flag indicating if the product is visible and can be found.",
              "type": "boolean"
            },
            "is_orderable": {
              "description": "Flag indicating if the product can be ordered.",
              "type": "boolean"
            },
            "is_incomplete": {
              "description": "Flag indicating if the product is incomplete.",
              "type": "boolean"
            },
            "is_service": {
              "description": "Flag indicating if the product is a service item.",
              "type": "boolean"
            },
            "is_managed": {
              "description": "Flag indicating if the product is managed by an external provider.",
              "type": "boolean"
            },
            "managed_type": {
              "description": "Managed type of the item. Only relevant in combination with `is_managed=true`.",
              "type": "string"
            },
            "is_configurable": {
              "description": "Flag indicating if the product must be configured.",
              "type": "boolean"
            },
            "categories": {
              "description": "List of associated categories.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ProductCategory"
              }
            }
          }
        }
      ]
    },
    "Image": {
      "title": "Image",
      "description": "Representation of an image.",
      "type": "object",
      "properties": {
        "type": {
          "description": "Type of the attachment.",
          "type": "string"
        },
        "href": {
          "description": "URL pointing to the image.",
          "type": "string"
        }
      }
    },
    "Product": {
      "title": "Product",
      "description": "Representation of a product containing all available information.",
      "type": "object",
      "properties": {
        "meplato_product_id": {
          "description": "Meplato identifier of the product.",
          "type": "string"
        },
        "external_product_id": {
          "description": "External identifier of the product.",
          "type": "string"
        },
        "supplier": {
          "$ref": "#/definitions/ProductSupplier"
        },
        "manufacturer": {
          "$ref": "#/definitions/ProductManufacturer"
        },
        "description": {
          "description": "Detailed description or rather long description.",
          "type": "string"
        },
        "material_group": {
          "description": "Material group.",
          "type": "string"
        },
        "numbers": {
          "$ref": "#/definitions/ProductNumbers"
        },
        "delivery_time": {
          "description": "Delivery time in days.",
          "type": "number",
          "format": "double"
        },
        "quantities": {
          "$ref": "#/definitions/ProductQuantities"
        },
        "order_unit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "packaging_unit": {
          "$ref": "#/definitions/ProductUnit"
        },
        "net_prices": {
          "$ref": "#/definitions/ProductPrices"
        },
        "gross_prices": {
          "$ref": "#/definitions/ProductPrices"
        },
        "currency": {
          "description": "Currency code.",
          "example": "[\r\n  \"EUR\",\r\n  \"USD\"\r\n]",
          "type": "string"
        },
        "display_prices": {
          "$ref": "#/definitions/ProductDisplayPrices"
        },
        "is_daily_price": {
          "description": "Flag indicating if the price is daily based.",
          "type": "boolean"
        },
        "is_visible": {
          "description": "Flag indicating if the product is visible and can be found.",
          "type": "boolean"
        },
        "is_orderable": {
          "description": "Flag indicating if the product can be ordered.",
          "type": "boolean"
        },
        "is_incomplete": {
          "description": "Flag indicating if the product is incomplete.",
          "type": "boolean"
        },
        "is_service": {
          "description": "Flag indicating if the product is a service item.",
          "type": "boolean"
        },
        "is_managed": {
          "description": "Flag indicating if the product is managed by an external provider.",
          "type": "boolean"
        },
        "managed_type": {
          "description": "Managed type of the item. Only relevant in combination with `is_managed=true`.",
          "type": "string"
        },
        "is_configurable": {
          "description": "Flag indicating if the product must be configured.",
          "type": "boolean"
        },
        "categories": {
          "description": "List of associated categories.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProductCategory"
          }
        }
      }
    },
    "ProductSupplier": {
      "title": "ProductSupplier",
      "description": "Representation of a supplier.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Display code of the supplier.",
          "type": "string"
        },
        "name": {
          "description": "Display name of the supplier.",
          "type": "string"
        }
      }
    },
    "ProductManufacturer": {
      "title": "ProductManufacturer",
      "description": "Representation of a manufacturer.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Display code of the manufacturer.",
          "type": "string"
        },
        "name": {
          "description": "Display name of the manufacturer.",
          "type": "string"
        }
      }
    },
    "ProductNumbers": {
      "title": "ProductNumbers",
      "description": "Representation of product identifiers.",
      "type": "object",
      "properties": {
        "supplier": {
          "description": "Product identifier of the supplier, e.g. supplier sku or item number.",
          "type": "string"
        },
        "manufacturer": {
          "description": "Product identifier of the manufacturer, e.g. manufacturers article number.",
          "type": "string"
        },
        "buyer": {
          "description": "Product identifier of the purchasing organization, e.g. material item number in stock.",
          "type": "string"
        },
        "gtin": {
          "description": "Global Trade Item Number.",
          "type": "string"
        },
        "asin": {
          "description": "Amazon Standard Identification Number.",
          "type": "string"
        },
        "additional": {
          "description": "List of additional product identifiers.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "previous": {
          "description": "List of identifiers this product had before.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "replaced": {
          "description": "List of identifiers this product replaces.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProductQuantities": {
      "title": "ProductQuantities",
      "description": "Representation of quantity information.",
      "type": "object",
      "properties": {
        "minimum_quantity": {
          "description": "Minimum order quantity of the item, e.g. must be at least 10 packs.",
          "example": 1,
          "type": "number",
          "default": 1.0,
          "format": "double"
        },
        "maximum_quantity": {
          "description": "Maximum order quantity of the item, e.g. only 1 eBook could be ordered.",
          "type": "number",
          "format": "double"
        },
        "interval_quantity": {
          "description": "Interval order quantity of the item, e.g. could be ordered in amounts of 10, 20, 30 packs and so on.",
          "example": 1,
          "type": "number",
          "default": 1.0,
          "format": "double"
        },
        "packaging_quantity": {
          "description": "Packaging quantity of the item, e.g. 1 pack contains 10 pieces.",
          "example": 1,
          "type": "number",
          "default": 1.0,
          "format": "double"
        },
        "price_quantity": {
          "description": "Price is specified for a certain order quantity of units, e.g. 100 means that 100 units are ordered for a price of 92.100 USD.",
          "example": 1,
          "type": "number",
          "default": 1.0,
          "format": "double"
        }
      }
    },
    "ProductUnit": {
      "title": "ProductUnit",
      "description": "Representation of a unit.",
      "type": "object",
      "properties": {
        "code": {
          "description": "Technical code.",
          "example": "[\r\n  \"PK\",\r\n  \"HR\"\r\n]",
          "type": "string"
        },
        "abbreviation_singular": {
          "description": "Localized abbreviation for singular.",
          "example": "[\r\n  \"pc\"\r\n]",
          "type": "string"
        },
        "abbreviation_plural": {
          "description": "Localized abbreviation for plural.",
          "example": "[\r\n  \"pcs\"\r\n]",
          "type": "string"
        },
        "name_singular": {
          "description": "Localized name for singular.",
          "example": "[\r\n  \"piece\"\r\n]",
          "type": "string"
        },
        "name_plural": {
          "description": "Localized name for plural.",
          "example": "[\r\n  \"pieces\"\r\n]",
          "type": "string"
        }
      }
    },
    "ProductPrices": {
      "title": "ProductPrices",
      "description": "Representation of price information.",
      "type": "object",
      "properties": {
        "order_price": {
          "description": "Price of the item in the given currency for the specified price quantity, e.g. 92.100 USD for 100 packs. This is the orderable price.",
          "type": "number",
          "format": "double"
        },
        "unit_price": {
          "description": "Calculated price for a single order unit, e.g. 0.921 USD for 1 pack ordered at a price of 92.100 USD for 100 packs. Non-orderable price, it is just for display purposes.",
          "type": "number",
          "format": "double"
        },
        "item_price": {
          "description": "Calculated price for one single item if a packaging unit and packaging quantity is given, e.g. 0.0921 USD for each piece in 1 pack ordered at a price of 92.100 USD for 100 packs containing 10 pieces per pack. Non-orderable price, it is just for display purposes.",
          "type": "number",
          "format": "double"
        }
      }
    },
    "ProductDisplayPrices": {
      "title": "ProductDisplayPrices",
      "description": "Representation of price information converted in the user's display currency.",
      "type": "object",
      "properties": {
        "net_prices": {
          "$ref": "#/definitions/ProductPrices"
        },
        "gross_prices": {
          "$ref": "#/definitions/ProductPrices"
        },
        "currency": {
          "description": "Currency code.",
          "type": "string"
        }
      }
    },
    "ProductCategory": {
      "title": "ProductCategory",
      "description": "Representation of a category.",
      "type": "object",
      "properties": {
        "schema": {
          "description": "Schema of the associated classification.",
          "type": "string"
        },
        "version": {
          "description": "Version of the associated classification.",
          "example": "[\r\n  6\r\n]",
          "type": "string"
        },
        "code": {
          "description": "Code of the category.",
          "example": "[\r\n  16030190\r\n]",
          "type": "string"
        },
        "name": {
          "description": "Localized name of the category",
          "example": "[\r\n  \"Handheld measuring instrument\"\r\n]",
          "type": "string"
        },
        "path": {
          "description": "Complete paths of the category within the hierarchy.",
          "example": [
            "0|ECLASS-6.2",
            "1|ECLASS-6.2|23",
            "2|ECLASS-6.2|23|33",
            "3|ECLASS-6.2|23|33|02",
            "4|ECLASS-6.2|23|33|02|07"
          ],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "Webshop": {
      "title": "Webshop",
      "description": "Representation of a webshop containing all available information.",
      "type": "object",
      "properties": {
        "description": {
          "description": "Detailed description or rather long description.",
          "type": "string"
        }
      }
    },
    "Suggest500Error": {
      "title": "Suggest500Error",
      "type": "object",
      "properties": {
        "type": {
          "description": "An absolute URI that identifies the problem type.  When dereferenced,\nit SHOULD provide human-readable documentation for the problem type\n(e.g., using HTML).",
          "example": "https://zalando.github.io/problem/constraint-violation",
          "type": "string",
          "default": "about:blank"
        },
        "title": {
          "description": "A short, summary of the problem type. Written in english and readable\nfor engineers (usually not suited for non technical stakeholders and\nnot localized); example: Service Unavailable",
          "type": "string"
        },
        "status": {
          "description": "The HTTP status code generated by the origin server for this occurrence\nof the problem.",
          "example": 503,
          "type": "integer",
          "minimum": 100.0,
          "maximum": 600.0,
          "exclusiveMaximum": true,
          "format": "int32"
        },
        "detail": {
          "description": "A human readable explanation specific to this occurrence of the\nproblem.",
          "example": "Connection to database timed out",
          "type": "string"
        },
        "instance": {
          "description": "An absolute URI that identifies the specific occurrence of the problem.\nIt may or may not yield further information if dereferenced.",
          "type": "string"
        }
      }
    },
    "Type": {
      "title": "Type",
      "description": "The search type. Can be used to perform a special search on limited sets of fields of the product. If not specified a search on the default fields will be perfomred.",
      "type": "string",
      "enum": [
        "manufacturerName",
        "supplierName",
        "articleNumber",
        "gtin",
        "contractNumber"
      ]
    },
    "Type1": {
      "title": "Type1",
      "description": "Type of the suggestion.",
      "type": "string",
      "enum": [
        "term",
        "term_in_category",
        "manufacturer",
        "supplier",
        "numbers",
        "barcode"
      ]
    }
  },
  "security": [
    {
      "auth": []
    }
  ],
  "tags": []
}